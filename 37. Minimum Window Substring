// Given two strings s and t of lengths m and n respectively, return the minimum window 
//substring of s such that every character in t (including duplicates) is included in the window. If there is no such substring, return the empty string "".
//The testcases will be generated such that the answer is unique.


class Solution {
    static final int no_of_chars = 256;
    public String minWindow(String s, String t) {
      int len1 = s.length();
      int len2 = t.length();

        if (len1 < len2) {
            return "";
        }

        int hash_t[] = new int[no_of_chars];
        int hash_s[] = new int[no_of_chars];

        for (int i = 0; i < len2; i++)
            hash_t[t.charAt(i)]++;

        int start = 0, start_index = -1, min_len = Integer.MAX_VALUE; 
        int count = 0;
        for (int j = 0; j < len1; j++) {

            hash_s[s.charAt(j)]++;

            if (hash_s[s.charAt(j)] <= hash_t[s.charAt(j)])
                count++;
            if (count == len2) {

                while (hash_s[s.charAt(start)] > hash_t[s.charAt(start)]) {
                    hash_s[s.charAt(start)]--;
                    start++;
                }

                int len_window = j - start + 1;
                if (min_len > len_window) {
                    min_len = len_window;
                    start_index = start;
                } 
            }
        }

        if (start_index == -1) {
            return "";
        }

        return s.substring(start_index, start_index + min_len);
    }
}
