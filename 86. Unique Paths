// There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). 
// The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.
// Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.
// The test cases are generated so that the answer will be less than or equal to 2 * 109.

class Solution {
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];

        for(int[] rows:dp){
            Arrays.fill(rows,-1);
        }

        return paths(0,0,m,n,dp);
    }
    private int paths(int row,int col,int m , int n,int[][] dp){
      if (row >= m || col >= n) {
            return 0;
        }
        if (row == m - 1 && col == n - 1) {
            return 1;
        }
        if(dp[row][col]!=-1){
            return dp[row][col];
        }

        dp[row][col]= paths(row+1,col,m,n,dp) + paths(row,col+1,m,n,dp);
        return dp[row][col];
    }

}
