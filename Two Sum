//Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
//You may assume that each input would have exactly one solution, and you may not use the same element twice.
//You can return the answer in any order.
1)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[j] == target - nums[i]) {
                    return new int[] { i, j };
                }
            }
        }
        return null;
    }
}
//Time Complexity=O(n^2)  ,  Space Complexity=O(1)
2)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer,Integer> map=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            int curr=target-nums[i];
            if(map.containsKey(curr)){
                return new int[] { map.get(curr),i};
            }
            map.put(nums[i],i);
        }
        return null;
    }}
}
// Time Complexity=O(n) , Space Complexity=O(n)
