You are given a 0-indexed array of integers nums of length n. You are initially positioned at nums[0].
Each element nums[i] represents the maximum length of a forward jump from index i. In other words, if you are at nums[i], you can jump to any nums[i + j] where:
0 <= j <= nums[i] and
i + j < n
Return the minimum number of jumps to reach nums[n - 1]. The test cases are generated such that you can reach nums[n - 1].

class Solution {
    public int jump(int[] nums) {
        int totalJumps = 0;                                                    // Counter for total jumps
        int destination = nums.length - 1;                                     // Index of the last element
        int coverage = 0;                                                      // Furthest point that can be reached with current jumps
        int lastJumpIdx = 0;                                                   // End of range for current jumps

        if (nums.length == 1) return 0;                                       // Edge case: no jumps needed for single element array

        for (int i = 0; i < nums.length; i++) {
            coverage = Math.max(coverage, i + nums[i]);                       // Update coverage

            if (i == lastJumpIdx) {                                           // Check if reached end of current jump range
                lastJumpIdx = coverage;                                       // Update end of jump range
                totalJumps++;                                                 // Increment jump counter

                if (coverage >= destination) {                                 // Check if destination is reachable
                    return totalJumps;
                }
            } 
            }
        return totalJumps;                                                      // Return total jumps
    }
}
