// Given an m x n grid of characters board and a string word, return true if word exists in the grid.
// The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring.
// The same letter cell may not be used more than once.

class Solution {
    public boolean exist(char[][] board, String word) {
         int n = board.length;
        int m = board[0].length;
        boolean visited[][] = new boolean[n][m];

        for(int i=0 ; i<board.length; i++){
            for(int j = 0; j <board[0].length; j++){
                if(board[i][j] == word.charAt(0)){
                    if(backtrack(board , word , visited, i , j , 0)) return true;
                }
            }
        }
        
        return false;
    }

    public static boolean backtrack(char[][] board, String word , boolean[][] visited , int i , int j , int k){
        if(k == word.length()){
            return true;
        }
        
        if(i < 0 || j < 0 || i >= board.length || j >= board[0].length || board[i][j] != word.charAt(k) || visited[i][j]){
            return false;
        }

        visited[i][j] = true;
        
        boolean res = (backtrack(board , word , visited, i-1 , j , k+1) || backtrack(board , word , visited, i , j-1, k+1) || backtrack(board , word , visited , i+1 , j , k+1) || backtrack(board , word , visited , i , j+1 , k+1));
        visited[i][j] = false;
        return res;
    }
    }
